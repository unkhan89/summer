
Raspberry PI 3B pin layout: http://blog.mcmelectronics.com/post/Raspberry-Pi-3-GPIO-Pin-Layout#.WAOZpCYoBC0

OpenCV 2.4 Python and C++ docs: http://docs.opencv.org/2.4

OpenCV 3.0 docs: http://docs.opencv.org/master/index.html

  Image: http://docs.opencv.org/master/d2/de8/group__core__array.html

Color spaces explained: https://www.youtube.com/watch?v=LJ2hDkUdX_w 


Project structure:

  - 'lib' directory contains commonly used modules (drivers, logger, utils, etc.) that each app must initialize and itself
  - 'apps' directory contains indiviudal applications that are ran independantlyc


Dependencies (other than those in package.json):
  
  - OpenCV:
    
    Dependecies: 
      sudo apt-get install build-essential
      sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
      (Optional) sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev
    OpenCV lib:  
      sudo apt-get install libopencv-dev
        For Mac OSX:
          brew tap homebrew/science
          brew install opencv
        For using python module: 
          sudo apt-get install python-opencv
        Alternatively, build from source:
          cd ~/opencv-2.4.11
          mkdir release
          cd release
          cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..
          make
          sudo make install
    Install Image Magic (might be dependency only for using Viola-Jones Object Detection Framework, and not OpenCV):
      apt-get install imagemagick 
      For Mac OSX: brew install imagemagick 

  - Flask: sudo pip install flask    

TODO: 

  - adjust arm web controller to allow "easier" manual control using keyboad, and reports back on current positions of servos
  - write controller for arm and a separate one for the gripper, each of which initialize their respective drivers, not the app (app should init the arm and gripper) 
  - need a smarter way to determine what checkers piece, if any, is in what cell, some thougths:
    Take a pick of a red piece and a yellow piece and see if a template/image match catches all of them
      Draw2.py (using template instead of hard coding cell coordinates) throwing an assertion error.
    Function that can run over the cell highlights generated by cvTest.py and fill in the remaining gaps of the lines
      Can a template solve this? 


